{"version":3,"sources":["webpack:///webpack/bootstrap d179705136ef300c5fe7","webpack:///./app/assets/javascripts/tetris/main.js","webpack:///./app/assets/javascripts/tetris/view.js","webpack:///./app/assets/javascripts/tetris/tetris.js","webpack:///./app/assets/javascripts/tetris/block.js","webpack:///./app/assets/javascripts/tetris/board.js","webpack:///./app/assets/javascripts/tetris/game.js","webpack:///./app/assets/javascripts/tetris/util.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACPD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAiB,wCAAwC;AACzD;AACA;;AAEA;AACA;AACA,kBAAiB,4BAA4B;AAC7C;AACA;AACA,kBAAiB,4BAA4B;AAC7C;AACA;;AAEA;AACA;AACA,qCAAoC,MAAM;AAC1C,IAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B,gBAAgB;;AAE7C;AACA;AACA;;AAEA;AACA,kBAAiB,uBAAuB;AACxC,oBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAmB,uBAAuB;AAC1C,sBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA,kBAAiB,iCAAiC;AAClD;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;;;;;;;AChGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;;AC/CA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,sBAAsB;AACvC,oBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,sBAAsB;AACvC;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvDA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA,kBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA,kBAAiB,gBAAgB;AACjC,mBAAkB,cAAc;AAChC;AACA;AACA;;AAEA;;;;;;;ACvCA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAsB,QAAQ;;AAE9B;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpHA;;AAEA;AACA;AACA,kBAAiB,aAAa;AAC9B;AACA,oBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d179705136ef300c5fe7\n **/","const View = require(\"./view.js\");\n\n$(() => {\n  const $tetris = $(\".tetris\");\n  if ($tetris.length === 1){\n    new View($tetris);\n  }\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/javascripts/tetris/main.js\n ** module id = 0\n ** module chunks = 0\n **/","const Tetris = require(\"./tetris.js\");\nconst Game = require(\"./game.js\");\n\nconst STEP_INTERVAL = 250;\n\nfunction View ($tetris) {\n  this.$board = $tetris.find(\".board\");\n  this.$infoPane = $tetris.find(\".info-pane\");\n  this.$highscores = $tetris.find(\".highscores\");\n\n  this.$next = this.$infoPane.find(\".next\");\n  this.$save = this.$infoPane.find(\".save\");\n  this.$score = this.$infoPane.find(\".score\");\n\n  this.setup();\n}\n\nView.prototype.setup = function () {\n  // setup board\n  for (let i = 0; i < Tetris.NUM_COLS  * Tetris.NUM_ROWS; i++) {\n    this.$board.append($('<li>'));\n  }\n\n  //setup next and save mini boards\n  const blockSize = Tetris.BLOCKS[0].length;\n  for (let i = 0; i < Math.pow(blockSize, 2); i++) {\n    this.$next.append($('<li>'));\n  }\n  for (let i = 0; i < Math.pow(blockSize, 2); i++) {\n    this.$save.append($('<li>'));\n  }\n\n  // init game\n  this.game = new Game(score => {\n    alert(`Game over, your score: ${score}`);\n  });\n\n  // start game\n  this.timerId = setInterval(this.step.bind(this), STEP_INTERVAL);\n};\n\nView.prototype.step = function () {\n  this.game.step();\n  this.render();\n};\n\nView.prototype.render = function () {\n  //score\n  this.$score.html(`Score: ${this.game.score}`);\n\n  //next block\n  let $cells = this.$next.find(\"li\");\n  $cells.css(\"background-color\", \"white\");\n\n  let block = this.game.nextBlock;\n  for (let i = 0; i < block.grid.length; i++){\n    for (let j = 0; j < block.grid[i].length; j++){\n      if (block.grid[i][j]){\n        $cells.eq(i * block.grid.length + j).css(\"background-color\", block.color);\n      }\n    }\n  }\n\n  //save block\n  if (this.game.saveBlock){\n    $cells = this.$save.find(\"li\");\n    $cells.css(\"background-color\", \"white\");\n\n    let block = this.game.saveBlock;\n    for (let i = 0; i < block.grid.length; i++){\n      for (let j = 0; j < block.grid[i].length; j++){\n        if (block.grid[i][j]){\n          $cells.eq(i * block.grid.length + j).css(\"background-color\", block.color);\n        }\n      }\n    }\n  }\n\n  // board cells\n  $cells = this.$board.find(\"li\");\n  $cells.css(\"background-color\", \"white\");\n\n  // curr block\n  this.game.currBlock.occupiedCells().forEach(cell => {\n    $cells.eq(cell[0] * Tetris.NUM_COLS  + cell[1]).css(\"background-color\", this.game.currBlock.color);\n  });\n\n  // board\n  for (let i = 0; i < this.game.board.grid.length; i++) {\n    const row = this.game.board.grid[i];\n    for (let j = 0; j < row.length; j++) {\n      $cells.eq(i * Tetris.NUM_COLS + j).css(\"background-color\", row[j]);\n    }\n  }\n};\n\nmodule.exports = View;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/javascripts/tetris/view.js\n ** module id = 1\n ** module chunks = 0\n **/","const Tetris = {};\n\nTetris.BLOCKS = [\n  [[0, 0, 0, 0],\n   [0, 0, 0, 0],\n   [1, 1, 1, 1],\n   [0, 0, 0, 0]],\n\n [[0, 0, 0, 0],\n  [1, 0, 0, 0],\n  [1, 1, 1, 0],\n  [0, 0, 0, 0]],\n\n  [[0, 0, 0, 0],\n   [1, 1, 1, 0],\n   [1, 0, 0, 0],\n   [0, 0, 0, 0]],\n\n  [[0, 0, 0, 0],\n   [0, 1, 0, 0],\n   [1, 1, 1, 0],\n   [0, 0, 0, 0]],\n\n [[0, 0, 0, 0],\n  [1, 1, 0, 0],\n  [0, 1, 1, 0],\n  [0, 0, 0, 0]],\n\n  [[0, 0, 0, 0],\n   [0, 1, 1, 0],\n   [1, 1, 0, 0],\n   [0, 0, 0, 0]],\n\n  [[0, 0, 0, 0],\n   [0, 1, 1, 0],\n   [0, 1, 1, 0],\n   [0, 0, 0, 0]]\n];\n\nTetris.BLOCK_COLORS = [\"red\",\n                      \"green\", \"yellow\",\n                      \"blue\", \"orange\",\n                      \"purple\", \"pink\"];\n\nTetris.NUM_COLS = 10;\nTetris.NUM_ROWS = 22;\n\nmodule.exports = Tetris;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/javascripts/tetris/tetris.js\n ** module id = 2\n ** module chunks = 0\n **/","const Tetris = require(\"./tetris.js\");\n\nfunction Block (grid, color, pos, game) {\n  this.grid = grid;\n  this.color = color;\n  this.pos = pos;\n  this.game = game;\n}\n\nBlock.randomBlock = function (pos, game) {\n  const i = Math.floor(Math.random() * Tetris.BLOCKS.length);\n  const grid = Tetris.BLOCKS[i].slice();\n  const color = Tetris.BLOCK_COLORS[i];\n  return new Block (grid, color, pos, game);\n};\n\nBlock.prototype.occupiedCells = function () {\n  const cells = [];\n  for (let i = 0; i < this.grid.length; i++) {\n    for (let j = 0; j < this.grid[i].length; j++) {\n      if (this.grid[i][j]) {\n        cells.push([i + this.pos[0], j + this.pos[1]]);\n      }\n    }\n  }\n  return cells;\n};\n\nBlock.prototype.validPos = function () {\n  const cells = this.occupiedCells();\n  for (let i = 0; i < cells.length; i++) {\n    const y = cells[i][0], x = cells[i][1];\n    const boardGrid = this.game.board.grid;\n    if (x < 0 || x >= Tetris.NUM_COLS || y >= Tetris.NUM_ROWS || boardGrid[y][x]){\n      return false\n    }\n  }\n  return true;\n}\n\nBlock.prototype.rotate = function (dir) {\n  const rotated = [];\n  for (let i = 0; i < this.grid.length; i++) {\n    rotated.push([]);\n    for (let j = 0; j < this.grid.length; j++) {\n      if (dir) {\n        rotated[i].push(this.grid[this.grid.length - j - 1][i]);\n      } else {\n        rotated[i].push(this.grid[j][this.grid.length - i - 1]);\n      }\n    }\n  }\n  this.grid = rotated;\n}\n\nmodule.exports = Block;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/javascripts/tetris/block.js\n ** module id = 3\n ** module chunks = 0\n **/","const Util = require(\"./util.js\");\nconst Tetris = require(\"./tetris.js\");\n\nfunction Board (game) {\n  this.game = game;\n  this.grid = Util.emptyGrid(Tetris.NUM_ROWS, Tetris.NUM_COLS);\n}\n\nBoard.prototype.addBlock = function (block) {\n  block.occupiedCells().forEach(cell => {\n    const y = cell[0], x = cell[1];\n    this.grid[y][x] = block.color;\n  });\n};\n\nBoard.prototype.clearRows = function () {\n  const rowsToClear = [];\n  for (let i = 0; i < this.grid.length; i++) {\n    if (Board.rowCleared(this.grid[i])){\n      rowsToClear.push(i);\n    }\n  }\n\n  rowsToClear.forEach(i => {\n    this.grid.splice(i, 1);\n    const emptyRow = new Array(Tetris.NUM_COLS).map(n => null);\n    this.grid.unshift(emptyRow);\n  });\n\n  return rowsToClear.length;\n};\n\nBoard.rowCleared = function (row) {\n  for (let i = 0; i < row.length; i++) {\n    if (!row[i]) { return false; }\n  }\n  return true;\n};\n\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/javascripts/tetris/board.js\n ** module id = 4\n ** module chunks = 0\n **/","const Block = require(\"./block.js\");\nconst Board = require(\"./board.js\");\nconst Tetris = require(\"./tetris.js\");\n\nconst blockStartPos =  [-1, Math.floor(Tetris.NUM_COLS / 2) - 2];\n\nfunction Game(gameOver) {\n  this.gameOver = gameOver;\n\n  // add key listeners\n  $(window).on(\"keydown\", this.handleKey.bind(this));\n\n  this.reset();\n}\n\nGame.prototype.newBlock = function () {\n  return Block.randomBlock(blockStartPos.slice().slice(), this);\n};\n\nGame.prototype.reset = function () {\n  this.board = new Board(this);\n  this.currBlock = this.newBlock();\n  this.nextBlock = this.newBlock();\n  this.saveBlock = null;\n\n  this.hasSaved = false;\n  this.score = 0;\n};\n\nGame.prototype.newTurn = function () {\n  this.board.addBlock(this.currBlock);\n  this.currBlock = this.nextBlock;\n  this.nextBlock = this.newBlock();\n\n  // clear rows and increment score\n  const rowsCleared = this.board.clearRows();\n  if (rowsCleared) {\n    this.score += Math.pow(10, rowsCleared);\n  }\n\n  this.hasSaved = false;\n\n  // check for game over\n  if (!this.currBlock.validPos()){\n    this.gameOver(this.score);\n    this.reset();\n  }\n};\n\nGame.prototype.step = function () {\n  this.currBlock.pos[0]++;\n\n  // check for end of turn\n  if (!this.currBlock.validPos()){\n    this.currBlock.pos[0]--;\n    this.newTurn();\n  }\n};\n\nGame.prototype.save = function () {\n  // dont allow multiple saves on same turn\n  if (this.hasSaved) { return; }\n\n  const prevSavedBlock = this.storeBlock(this.currBlock);\n  if (prevSavedBlock) {\n    this.currBlock = prevSavedBlock;\n    this.hasSaved = true;\n  } else {\n    this.currBlock = this.nextBlock;\n    this.nextBlock = this.newBlock();\n    // allow user to save again if this was first save\n  }\n};\n\nGame.prototype.storeBlock = function (block) {\n  const temp = this.saveBlock;\n  this.saveBlock = block;\n  this.saveBlock.pos = blockStartPos.slice();\n  return temp;\n};\n\nGame.prototype.handleKey = function (event) {\n  const kc = event.keyCode;\n  switch (kc) {\n    case 37:\n      this.move(-1);\n      break;\n    case 39:\n      this.move(1);\n      break;\n    case 90:\n      this.rotate(1);\n      break;\n    case 88:\n      this.rotate(0);\n      break;\n    case 83:\n      this.save();\n      break;\n  }\n};\n\nGame.prototype.move = function (dir) {\n  this.currBlock.pos[1] += dir;\n  if (!this.currBlock.validPos()){\n    this.currBlock.pos[1] -= dir;\n  }\n};\n\nGame.prototype.rotate = function (dir) {\n  this.currBlock.rotate(dir);\n  if (!this.currBlock.validPos()){\n    this.currBlock.rotate(!dir);\n  }\n};\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/javascripts/tetris/game.js\n ** module id = 5\n ** module chunks = 0\n **/","const Util = {};\n\nUtil.emptyGrid = function (numRows, numCols) {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    grid[i] = [];\n    for (let j = 0; j < numCols; j++) {\n      grid[i].push(null);\n    }\n  }\n  return grid;\n};\n\nmodule.exports = Util;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/javascripts/tetris/util.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}